drop TABLE product, supplier, address, DeliveryInfo, creditCard, client, reference, replacementOrder, customerOrder;

CREATE TABLE product (
  product_name CHAR(50),
  coffea CHAR(20),
  varietal CHAR(30),
  origin CHAR(15),
  roasting CHAR(10),
  dcafprocess CHAR(12),
  CONSTRAINT pk_product PRIMARY KEY(name),
  CONSTRAINT product_uniques UNIQUE(name)
 );

CREATE TABLE supplier (
  supplier_name CHAR(35),
  prov_taxid CHAR(10),
  prov_bankacc CHAR(30),
  prov_address CHAR(120),
  prov_country CHAR(45),
  prov_person CHAR(90),
  prov_email CHAR(60),
  prov_mobile CHAR(9),
  cost_price NUMBER,
  CONSTRAINT pk_supplier PRIMARY KEY(supplier_name),
  CONSTRAINT supplier_uniques UNIQUE(supplier_name, prov_taxid, prov_bankacc, prov_address, prov_country, prov_person, prov_email, prov_mobile)

);

CREATE TABLE address (
  id NUMBER GENERATED BY DEFAULT AS IDENTITY,
  waytype CHAR(10),
  wayname CHAR(30),
  gate CHAR(3) NULL,
  block CHAR(1) NULL,
  stairw CHAR(2) NULL,
  floor CHAR(7) NULL,
  door CHAR(2) NULL,
  zip CHAR(5),
  town CHAR(45),
  country CHAR(45),
  CONSTRAINT pk_address PRIMARY KEY(id)
);

CREATE TABLE DeliveryInfo (
  DLIV_DATE CHAR(14),
  DLIV_TIME CHAR(14), 
  CONSTRAINT DeliveryInfo PRIMARY KEY(DLIV_DATE, DLIV_TIME)
);

CREATE TABLE creditCard (
  card_company CHAR(15),
  card_number CHAR(20),
  card_holder CHAR(30),
  card_expiration CHAR(7),
  CONSTRAINT pk_creditcard PRIMARY KEY(card_number),
  CONSTRAINT creditcard_uniques UNIQUE(card_number)
);

CREATE TABLE client (
  client_email CHAR(60),
  client_mobile CHAR(9),
  CONSTRAINT pk_client PRIMARY KEY(client_email, client_mobile),
  CONSTRAINT client_uniques UNIQUE(client_email, client_mobile)
);


CREATE TABLE reference (
  product_name NUMBER,
  barcode VARCHAR2(15),
  format CHAR(20),
  packaging CHAR(15),
  retail_price CHAR(14),
  cur_stock CHAR(5) DEFAULT 0,
  min_stock CHAR(5) DEFAULT 5,
  max_stock CHAR(5) DEFAULT 15,
  CONSTRAINT pk_ref PRIMARY KEY(barcode, retail_price, packaging),
  CONSTRAINT valid_cur_stock CHECK (cur_stock >= 0),
  CONSTRAINT valid_min_stock CHECK (min_stock >= 0),
  CONSTRAINT valid_max_stock CHECK (max_stock >= 0),
  CONSTRAINT valid_max_min CHECK (min_stock <= max_stock),
  CONSTRAINT fk_product FOREIGN KEY(product_name) REFERENCES product(product_name)
);

CREATE TABLE replacementOrder (
  orderdate CHAR(14),
  ordertime CHAR(14),
  status CHAR(30),
  supplier_id NUMBER,
  reference_id NUMBER,
  quantity CHAR(2),
  total_payment CHAR(14),
  deliveryinfo_id NUMBER,
  CONSTRAINT pk_reporder PRIMARY KEY(orderdate, ordertime, total_payment),
  CONSTRAINT fk_supplier FOREIGN KEY(supplier_id) REFERENCES supplier(supplier_name),
  CONSTRAINT fk_ref FOREIGN KEY(reference_id) REFERENCES reference(barcode, retail_price, packaging),
  CONSTRAINT fk_delivinfo FOREIGN KEY(deliveryinfo_id) REFERENCES deliveryinfo(DLIV_DATE, DLIV_TIME)
);

CREATE TABLE customerOrder (
  id NUMBER GENERATED BY DEFAULT AS IDENTITY,
  client VARCHAR2,
  orderdate CHAR(14),
  ordertime CHAR(14),
  address NUMBER,
  CONSTRAINT pk_custorder PRIMARY KEY(id),
  CONSTRAINT fk_client FOREIGN KEY(client) REFERENCES client(client_email, client_mobile),
  CONSTRAINT fk_address FOREIGN KEY(address) REFERENCES address(id)
 );
 
CREATE TABLE billing (
  id NUMBER GENERATED BY DEFAULT AS IDENTITY,
  customerorder_id NUMBER,
  creditcard_id NUMBER,
  payment_type CHAR(15),
  payment_date CHAR(14),
  payment_time CHAR(14),
  CONSTRAINT pk_billing PRIMARY KEY(id),
  CONSTRAINT fk_customer_id FOREIGN KEY(customerorder_id) REFERENCES customerOrder(id),
  CONSTRAINT fk_creditcard_id FOREIGN KEY(creditcard_id) REFERENCES creditCard(card_number)
);

CREATE TABLE item (
  id NUMBER GENERATED BY DEFAULT AS IDENTITY,
  customerorder_id NUMBER,
  reference_id NUMBER,
  quantity NUMBER,
  base_price NUMBER,
  total_price GENERATED ALWAYS AS (quantity * base_price) VIRTUAL,
  CONSTRAINT pk_item PRIMARY KEY(id),
  CONSTRAINT item_customer_id FOREIGN KEY(customerorder_id) REFERENCES customerOrder(id),
  CONSTRAINT item_reference_id FOREIGN KEY(reference_id) REFERENCES reference(barcode, retail_price, packaging)
);

CREATE TABLE delivery (
  id NUMBER GENERATED BY DEFAULT AS IDENTITY,
  item_id NUMBER,
  address_id NUMBER,
  deliveryinfo_id NUMBER,
  CONSTRAINT pk_delivery PRIMARY KEY(id)
);

CREATE TABLE voucher (
  id NUMBER GENERATED BY DEFAULT AS IDENTITY,
  discount CHAR(3),
  voucher_date CHAR(14),
  CONSTRAINT pk_voucher PRIMARY KEY(id)
);

CREATE TABLE registeredClient (
  id NUMBER GENERATED BY DEFAULT AS IDENTITY,
  client_id NUMBER,
  address_id NUMBER,
  creditcard_id NUMBER,
  username CHAR(30),
  reg_date CHAR(14),
  reg_time CHAR(14),
  user_passw CHAR(15),
  client_name CHAR(35),
  client_surn1 CHAR(30),
  client_surn2 CHAR(30),
  contact_preference CHAR(30) DEFAULT "sms",
  voucher_id NUMBER,
  CONSTRAINT pk_regclient PRIMARY KEY(id)
);


CREATE TABLE comments (
  id NUMBER GENERATED BY DEFAULT AS IDENTITY,
  RegisteredClientID NUMBER,
  post_date CHAR(100),
  post_time CHAR(100),
  title CHAR(100),
  text CHAR(100),
  score CHAR(100),
  likes CHAR(100) DEFAULT '0',
  endorsed CHAR(12),
  CONSTRAINT pk_comment PRIMARY KEY(id),
  CONSTRAINT valid_score CHECK (score Between 1 and 5), 
  CONSTRAINT max_likes CHECK (likes < 1000000000), 
  FOREIGN KEY (RegisteredClientID) REFERENCES RegisteredClient(ID)
);
